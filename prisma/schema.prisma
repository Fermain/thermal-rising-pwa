// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    phone         String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    inspections   Inspection[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    roles         Role    @relation( fields: [roleId], references: [id], onDelete: Cascade)
    roleId        String
}

model Role {
    id               String   @id @default(cuid())
    name             String   @unique
    users            User[]   
    type             RoleType

    createUser       Boolean?
    updateUser       Boolean?
    deleteUser       Boolean?
    readUser         Boolean?

    createSite       Boolean?
    updateSite       Boolean?
    deleteSite       Boolean?
    readSite         Boolean?

    createInspection Boolean?
    updateInspection Boolean?
    deleteInspection Boolean?
    readInspection   Boolean?

    createEquipment  Boolean?
    updateEquipment  Boolean?
    deleteEquipment  Boolean?
    readEquipment    Boolean?

    createChecklist  Boolean?
    updateChecklist  Boolean?
    deleteChecklist  Boolean?
    readChecklist    Boolean?

    createReport     Boolean?
    updateReport     Boolean?
    deleteReport     Boolean?
    readReport       Boolean?  
}

enum RoleType {
    INSPECTOR
    MANAGER
    GOD
}


model Site {
    id        String     @id @default(cuid())
    name      String     @unique
    //address
    street     String
    city       String
    state      String
    postalCode String
    country    String
    
    //contact
    phone     String?
    email     String?

    userId    String
    equipment Equipment[]
}

model Equipment {
    id         String      @id @default(cuid())
    name       String      @unique
    site       Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)
    siteId     String
    inspections Inspection[]
}

model Inspection {
    id          String   @id @default(cuid())
    name        String   @unique
    equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
    equipmentId String
    inspector   User     @relation(fields: [inspectorId], references: [id], onDelete: Cascade)
    inspectorId String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    // checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
    checklistId String
}

model Checklist {
    id            String    @id @default(cuid())
    name          String    @unique
    // inspection    Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
    inspectionId  String
    formStructure Json
    responses     ChecklistResponse[]
}

model ChecklistResponse {
    id          String   @id @default(cuid())
    checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
    checklistId String
    response    Json
}
// model Image {
//     id        String @id @default(cuid())
//     url       String @unique
//     equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
//     equipmentId String
// }

// model Signature {
//     id        String @id @default(cuid())
//     url       String @unique
//     user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//     userId    String
// }